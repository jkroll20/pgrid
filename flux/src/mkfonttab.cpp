// mkfonttab.cpp: generates char offsets from image file
// j. k. 02. 05. 2006

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <FreeImage.h>


struct rgba { unsigned char r, g, b, a; };

#define MINALPHA 	16
bool linehasalpha(rgba *line, int w, int fonth)
{
    for(int i= 0; i<fonth; i++, line+= w)
	if(line->a > MINALPHA) return true;
    return false;
}

void findoffsets(rgba *pixels, int w, int h, int pitch, int fonth, int margin, char *tblname)
{
    int nlines= h/fonth;
    static char chartab[]= "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\].^_`abcdefghijklmnopqrstuvwxyz{|}~.........";
    
    printf("// character table generated by mkfonttab.cpp\n"
	   "#ifndef font_coord_type\n"
	   "#define font_coord_type short\n"
	   "#endif\n"
	   "font_coord_type %s[]= \n"
	   "{", tblname);
    
    int nchar= 0;
    pixels+= (h-fonth)*w;
    for(int y= 0; y<nlines; y++, pixels-= fonth*w)
    {
	int x= 0, charstart, charend;
	
	printf("\n\t// line %d\n", y);
	int nclinestart= nchar;
	while(x<w)
	{
	    if(x>=w) continue;
	    while(x<w && !linehasalpha(pixels+x, w, fonth)) x++;
	    if(x>=w) continue;
	    charstart= x;
	    while(x<w && linehasalpha(pixels+x, w, fonth)) x++;
	    charend= x;
	    
	    charstart-= margin; if(charstart<0) charstart= 0;
	    charend+= margin? margin: 1; if(charend>w) charend= w;
	
	    printf("\t%3d,%3d, %3d,%3d,\t// ", charstart,y*fonth, charend,(y+1)*fonth);
	    int c= nchar+'!';	//chartab[nchar%(sizeof(chartab)-1)]
	    if(c=='\\') puts("backslash");
	    else if(isprint(c)) printf("%c\n", c);
	    else printf("<0x%2X>\n", c);
	    nchar++;
	}
	printf("\t// %d chars\n", nchar-nclinestart);
    }
    
    printf("};\n");
    
    //~ if(nchar!=sizeof(chartab)-1)
	//~ fprintf(stderr, "WARNING: nchars != table size (%d != %d)\n", nchar, sizeof(chartab)-1);
}



void antialias_pixels(rgba *pixels, int w, int h, int f, int f2)
{
#define pix(x,y) data[(y)*w+(x)].a
#define px2(x,y) data2[(y)*w+(x)]
    int i, x, y;
    rgba *data= pixels;
    rgba *ndat= (rgba *)malloc(w*h*4);
    rgba *data2= ndat;
    memcpy(data2, data, w*h*4);

    for(y= 1; y<h-1; y++)
    {
        for(x= 1; x<w-1; x++)
        {
            if(!pix(x,y))
            {
                // links oben
                if(x>0&&y>0 && pix(x-1,y) && pix(x,y-1))
                {
		    px2(x,y).a= ( pix(x-1,y)+pix(x,y-1) ) * f >> 10;
		    px2(x,y).r= px2(x,y).g= px2(x,y).b= 255;
		    if(pix(x-2,y)) px2(x-1,y).a= pix(x-1,y)-(px2(x-1,y).a*f2>>9);
		    if(pix(x,y-2)) px2(x,y-1).a= pix(x,y-1)-(px2(x,y-1).a*f2>>9);
                }
            
                // rechts oben
                else if(x<w-1&&y>0 && pix(x+1,y) && pix(x,y-1))
                {
                    px2(x,y).a= ( pix(x+1,y)+pix(x,y-1) ) * f >> 10;
		    px2(x,y).r= px2(x,y).g= px2(x,y).b= 255;
                    if(pix(x+2,y)) px2(x+1,y).a= pix(x+1,y)-(px2(x+1,y).a*f2>>9);
                    if(pix(x,y-2)) px2(x,y-1).a= pix(x,y-1)-(px2(x,y-1).a*f2>>9);
                }
            
                // rechts unten
                else if(x<w-1&&y<h-1 && pix(x+1,y) && pix(x,y+1))
                {
                    px2(x,y).a= ( pix(x+1,y)+pix(x,y+1) ) * f >> 10;
		    px2(x,y).r= px2(x,y).g= px2(x,y).b= 255;
                    if(pix(x+2,y)) px2(x+1,y).a= pix(x+1,y)-(px2(x+1,y).a*f2>>9);
                    if(pix(x,y+2)) px2(x,y+1).a= pix(x,y+1)-(px2(x,y+1).a*f2>>9);
                }
            
                // links unten
	        else if(x>0&&y<h-1 && pix(x-1,y) && pix(x,y+1))
                {
                    px2(x,y).a= ( pix(x-1,y)+pix(x,y+1) ) * f >> 10;
		    px2(x,y).r= px2(x,y).g= px2(x,y).b= 255;
                    if(pix(x-2,y)) px2(x-1,y).a= pix(x-1,y)-(px2(x-1,y).a*f2>>9);
                    if(pix(x,y+2)) px2(x,y+1).a= pix(x,y+1)-(px2(x,y+1).a*f2>>9);
                }
	    }
        }
    }
    
    memcpy(pixels, ndat, w*h*4);
    free(ndat);
    
    //~ free(font->data);
    //~ font->data= ndat;
#undef pix
#undef px2
  
    //~ font_dep_update(font);
}



int main(int argc, char *argv[])
{
    if(argc<3)
    {
	printf("usage: mkfonttab [image] [fontheight] <-m margin> <-n tblname>\n"
	       "   or: mkfonttab -a [image] (font antialiasing)\n");
	
	return 1;
    }
    
    FreeImage_Initialise();
    
    bool antialias= !strcmp(argv[1], "-a");
    
    char *fname= antialias? argv[2]: argv[1];
    FIBITMAP *fi= FreeImage_Load(FreeImage_GetFIFFromFilename(fname), fname);
    if(!fi) 
    {
	printf("couldn't load %s\n", fname);
	return 1;
    }
    
    rgba *pixels= (rgba*)FreeImage_GetBits(fi);
    int w= FreeImage_GetWidth(fi), 
    	h= FreeImage_GetHeight(fi),
    	pitch= FreeImage_GetPitch(fi),
    	bpp= FreeImage_GetBPP(fi);
    
    if(bpp!=32) { printf("error: image must be 32 bits per pixel.\n"); return 1; }
    
    if(antialias)
    {
	antialias_pixels(pixels, w, h, 192, 128);
	FreeImage_Save(FIF_PNG, fi, "out.png");
    }
    else
    {
    	int fonth= atoi(argv[2]);
    	int margin= 2;
    	char *tblname= "char_coords";
	
    	for(int i= 3; i<argc; i++)
    	{
	    if(!strcmp(argv[i], "-m"))
	    	margin= atoi(argv[++i]);
	    else if(!strcmp(argv[i], "-n"))
	    	tblname= argv[++i];
    	}
    
    	findoffsets(pixels, w, h, pitch, fonth, margin, tblname);
    }
    
    return 0;
}


